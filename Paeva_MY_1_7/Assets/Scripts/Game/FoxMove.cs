//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/FoxMove.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FoxMove : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FoxMove()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FoxMove"",
    ""maps"": [
        {
            ""name"": ""FoxMoveMap"",
            ""id"": ""01207e3e-51b4-4a5a-8237-131823c009c5"",
            ""actions"": [
                {
                    ""name"": ""FoxMove"",
                    ""type"": ""Value"",
                    ""id"": ""1b86d951-6022-4a78-adb2-3832383e5451"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FoxJump"",
                    ""type"": ""Button"",
                    ""id"": ""7dc6b212-a2e9-43ec-bb39-45f98ca9fecd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""915f1c69-9df8-4e69-ace1-57c2dbc1e8b2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FoxMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c74fb1e7-f783-4e9a-a68b-f9822c9c96ba"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FoxMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""af256fd8-3337-4356-835e-9b097521e29b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FoxMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a4bd04ae-e0da-4f19-8314-e0c9709cea69"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FoxJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FoxMoveMap
        m_FoxMoveMap = asset.FindActionMap("FoxMoveMap", throwIfNotFound: true);
        m_FoxMoveMap_FoxMove = m_FoxMoveMap.FindAction("FoxMove", throwIfNotFound: true);
        m_FoxMoveMap_FoxJump = m_FoxMoveMap.FindAction("FoxJump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FoxMoveMap
    private readonly InputActionMap m_FoxMoveMap;
    private IFoxMoveMapActions m_FoxMoveMapActionsCallbackInterface;
    private readonly InputAction m_FoxMoveMap_FoxMove;
    private readonly InputAction m_FoxMoveMap_FoxJump;
    public struct FoxMoveMapActions
    {
        private @FoxMove m_Wrapper;
        public FoxMoveMapActions(@FoxMove wrapper) { m_Wrapper = wrapper; }
        public InputAction @FoxMove => m_Wrapper.m_FoxMoveMap_FoxMove;
        public InputAction @FoxJump => m_Wrapper.m_FoxMoveMap_FoxJump;
        public InputActionMap Get() { return m_Wrapper.m_FoxMoveMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FoxMoveMapActions set) { return set.Get(); }
        public void SetCallbacks(IFoxMoveMapActions instance)
        {
            if (m_Wrapper.m_FoxMoveMapActionsCallbackInterface != null)
            {
                @FoxMove.started -= m_Wrapper.m_FoxMoveMapActionsCallbackInterface.OnFoxMove;
                @FoxMove.performed -= m_Wrapper.m_FoxMoveMapActionsCallbackInterface.OnFoxMove;
                @FoxMove.canceled -= m_Wrapper.m_FoxMoveMapActionsCallbackInterface.OnFoxMove;
                @FoxJump.started -= m_Wrapper.m_FoxMoveMapActionsCallbackInterface.OnFoxJump;
                @FoxJump.performed -= m_Wrapper.m_FoxMoveMapActionsCallbackInterface.OnFoxJump;
                @FoxJump.canceled -= m_Wrapper.m_FoxMoveMapActionsCallbackInterface.OnFoxJump;
            }
            m_Wrapper.m_FoxMoveMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @FoxMove.started += instance.OnFoxMove;
                @FoxMove.performed += instance.OnFoxMove;
                @FoxMove.canceled += instance.OnFoxMove;
                @FoxJump.started += instance.OnFoxJump;
                @FoxJump.performed += instance.OnFoxJump;
                @FoxJump.canceled += instance.OnFoxJump;
            }
        }
    }
    public FoxMoveMapActions @FoxMoveMap => new FoxMoveMapActions(this);
    public interface IFoxMoveMapActions
    {
        void OnFoxMove(InputAction.CallbackContext context);
        void OnFoxJump(InputAction.CallbackContext context);
    }
}
